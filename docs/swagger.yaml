definitions:
  auth.LoginRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.LoginResponse:
    properties:
      access_token:
        type: string
      access_token_expires_in:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_in:
        type: string
      session_id:
        type: string
      user_role:
        $ref: '#/definitions/models.Role'
    type: object
  auth.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiresIn:
        type: string
      refreshToken:
        type: string
      refreshTokenExpiresIn:
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      password:
        minLength: 6
        type: string
      user_email:
        type: string
      user_fullname:
        type: string
      user_role:
        type: string
      username:
        type: string
      year:
        type: integer
    required:
    - password
    - user_email
    - user_fullname
    - user_role
    - username
    - year
    type: object
  courses.CreateCourseRequest:
    properties:
      course_credit:
        maximum: 12
        minimum: 1
        type: integer
      course_day:
        allOf:
        - $ref: '#/definitions/models.Day'
        enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      course_department:
        type: string
      course_end_shift:
        maximum: 10
        minimum: 1
        type: integer
      course_fullname:
        maxLength: 200
        type: string
      course_name:
        maxLength: 100
        minLength: 3
        type: string
      course_room:
        maxLength: 50
        minLength: 2
        type: string
      course_semester:
        enum:
        - 1
        - 2
        - 3
        type: integer
      course_start_shift:
        maximum: 10
        minimum: 1
        type: integer
      course_teacher_id:
        description: CourseCode       string     `json:"course_code"`
        type: string
      course_year:
        maximum: 2100
        minimum: 2000
        type: integer
      current_enroll:
        maximum: 1000
        minimum: 0
        type: integer
      max_enroll:
        maximum: 1000
        minimum: 1
        type: integer
    required:
    - course_credit
    - course_day
    - course_department
    - course_end_shift
    - course_fullname
    - course_name
    - course_room
    - course_semester
    - course_start_shift
    - course_teacher_id
    - course_year
    - max_enroll
    type: object
  courses.EditCourseRequest:
    properties:
      course_credit:
        type: integer
      course_day:
        $ref: '#/definitions/models.Day'
      course_department:
        type: string
      course_end_shift:
        type: integer
      course_fullname:
        type: string
      course_id:
        type: string
      course_name:
        type: string
      course_room:
        type: string
      course_semester:
        type: integer
      course_start_shift:
        type: integer
      course_teacher_id:
        type: string
      course_year:
        type: integer
      current_enroll:
        type: integer
      max_enroll:
        type: integer
    required:
    - course_id
    type: object
  coursesmanagament.GetCreditRequest:
    properties:
      semester:
        type: integer
      year:
        type: integer
    required:
    - semester
    - year
    type: object
  coursesmanagament.UserRegisterCourseRequest:
    properties:
      course_id:
        type: string
      course_semester:
        type: integer
      course_year:
        type: integer
    required:
    - course_id
    type: object
  coursesmanagament.UserUnRegisterAdminCourseRequest:
    properties:
      course_id:
        type: string
      course_semester:
        type: integer
      course_year:
        type: integer
      user_id:
        type: string
    required:
    - course_id
    - course_semester
    - course_year
    - user_id
    type: object
  coursesmanagament.UserUnRegisterCourseRequest:
    properties:
      course_id:
        type: string
      course_semester:
        type: integer
      course_year:
        type: integer
    required:
    - course_id
    type: object
  departments.CreateDepartmentRequest:
    properties:
      department_code:
        maxLength: 10
        minLength: 2
        type: string
      department_name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - department_code
    - department_name
    type: object
  departments.UpdateDepartmentRequest:
    properties:
      department_code:
        type: string
      department_id:
        type: string
      department_name:
        type: string
    required:
    - department_code
    - department_id
    - department_name
    type: object
  global.SetTuitionTypeRequest:
    properties:
      cost:
        type: integer
      type:
        type: string
    required:
    - cost
    - type
    type: object
  models.Day:
    enum:
    - monday
    - tuesday
    - wednesday
    - thursday
    - friday
    - saturday
    - sunday
    type: string
    x-enum-varnames:
    - DayMonday
    - DayTuesday
    - DayWednesday
    - DayThursday
    - DayFriday
    - DaySaturday
    - DaySunday
  models.Department:
    properties:
      createdAt:
        type: string
      departmentCode:
        type: string
      departmentName:
        type: string
      id:
        type: string
      updatedAt:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  models.Role:
    enum:
    - admin
    - user
    - lecturer
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
    - RoleLecturer
  models.TuStatus:
    enum:
    - paid
    - unpaid
    type: string
    x-enum-varnames:
    - TuStatusPaid
    - TuStatusUnpaid
  schemas.CreateCourseResponse:
    properties:
      course_credit:
        type: integer
      course_day:
        $ref: '#/definitions/models.Day'
      course_department:
        type: string
      course_end_shift:
        type: integer
      course_fullname:
        type: string
      course_name:
        type: string
      course_room:
        type: string
      course_semester:
        type: integer
      course_start_shift:
        type: integer
      course_teacher_id:
        type: string
      course_teacher_name:
        type: string
      course_year:
        type: integer
      current_enroll:
        type: integer
      id:
        type: string
      max_enroll:
        type: integer
    type: object
  subject.AddPrerequisiteRequest:
    properties:
      course_id:
        type: string
      prerequisite_id:
        type: string
    required:
    - course_id
    - prerequisite_id
    type: object
  subject.SubjectCreateRequest:
    properties:
      course_fullname:
        type: string
      course_name:
        type: string
    required:
    - course_fullname
    - course_name
    type: object
  tuition.CalTuitionAdminRequest:
    properties:
      semester:
        type: integer
      user_id:
        type: string
      year:
        type: integer
    required:
    - semester
    - user_id
    - year
    type: object
  tuition.CalTuitionRequest:
    properties:
      semester:
        type: integer
      year:
        type: integer
    required:
    - semester
    - year
    type: object
  tuition.CreateTuitionRequest:
    properties:
      deadline:
        type: string
      semester:
        type: integer
      year:
        type: integer
    required:
    - deadline
    - semester
    - year
    type: object
  tuition.PayTuitionRequest:
    properties:
      pay:
        type: integer
      semester:
        type: integer
      tuition_id:
        type: string
      year:
        type: integer
    type: object
  tuition.UpdateTuitionRequest:
    properties:
      deadline:
        type: string
      semester:
        type: integer
      tuition:
        type: integer
      tuition_status:
        $ref: '#/definitions/models.TuStatus'
      user_id:
        type: string
      year:
        type: integer
    required:
    - semester
    - user_id
    - year
    type: object
  users.ChangePassRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  users.UpdateUserRequest:
    properties:
      id:
        type: string
      user_fullname:
        type: string
      user_role:
        $ref: '#/definitions/models.Role'
      year:
        type: integer
    required:
    - id
    type: object
info:
  contact: {}
paths:
  /course/confirm:
    put:
      consumes:
      - application/json
      description: Confirm course
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Course ID
        in: query
        name: course_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Confirm Course
      tags:
      - Courses
  /course/create:
    post:
      consumes:
      - application/json
      description: Create course
      parameters:
      - description: CreateCourseRequest
        in: body
        name: CreateCourseRequest
        required: true
        schema:
          $ref: '#/definitions/courses.CreateCourseRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create course
      tags:
      - Course
  /course/delete:
    delete:
      consumes:
      - application/json
      description: Delete course
      parameters:
      - description: Course ID
        in: body
        name: course_id
        required: true
        schema:
          type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete course
      tags:
      - Courses
  /course/edit:
    put:
      consumes:
      - application/json
      description: Edit course
      parameters:
      - description: EditCourseRequest
        in: body
        name: EditCourseRequest
        required: true
        schema:
          $ref: '#/definitions/courses.EditCourseRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Edit course
      tags:
      - Course
  /course/list:
    get:
      consumes:
      - application/json
      description: List all courses
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CreateCourseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List Courses
      tags:
      - Courses
  /department/create:
    post:
      consumes:
      - application/json
      description: Create department
      parameters:
      - description: CreateDepartmentRequest
        in: body
        name: CreateDepartmentRequest
        required: true
        schema:
          $ref: '#/definitions/departments.CreateDepartmentRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create department
      tags:
      - Department
  /department/delete:
    delete:
      consumes:
      - application/json
      description: Delete department
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Department code
        in: query
        name: department_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete department
      tags:
      - Department
  /department/list:
    get:
      consumes:
      - application/json
      description: List department
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Department'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List department
      tags:
      - Department
  /department/update:
    put:
      consumes:
      - application/json
      description: Update department
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: UpdateDepartmentRequest
        in: body
        name: UpdateDepartmentRequest
        required: true
        schema:
          $ref: '#/definitions/departments.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update department
      tags:
      - Department
  /global/state:
    post:
      description: Set global state
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: State
        enum:
        - freeze
        - active
        - setup
        - done
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Set global state
      tags:
      - Global
  /global/stats:
    get:
      description: Get stats
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get stats
      tags:
      - Global
  /global/tuition_type:
    get:
      description: Get tuition type
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get tuition type
      tags:
      - Global
    post:
      description: Set tuition type
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: SetTuitionTypeRequest
        in: body
        name: SetTuitionTypeRequest
        required: true
        schema:
          $ref: '#/definitions/global.SetTuitionTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Set tuition type
      tags:
      - Global
  /lecturer/course/enroller/list:
    get:
      description: List course enroller
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Course ID
        in: query
        name: course_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List course enroller
      tags:
      - Lecturer
  /lecturer/course/list:
    get:
      description: List lecturer courses
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List lecturer courses
      tags:
      - Lecturer
  /lecturer/course/register/list:
    get:
      description: List lecturer register courses
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List lecturer register courses
      tags:
      - Lecturer
  /login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: LoginRequest
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Login user
      tags:
      - Auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Logout user
      tags:
      - Auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Refresh token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: RegisterRequest
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Register user
      tags:
      - Auth
  /state:
    get:
      description: Get the state of the app
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get the state of the app
      tags:
      - Global
  /subject/add_prerequisite:
    post:
      consumes:
      - application/json
      description: Add Prerequisite
      parameters:
      - description: AddPrerequisiteRequest
        in: body
        name: AddPrerequisiteRequest
        required: true
        schema:
          $ref: '#/definitions/subject.AddPrerequisiteRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Add Prerequisite
      tags:
      - Subject
  /subject/create:
    post:
      consumes:
      - application/json
      description: Create subject
      parameters:
      - description: SubjectCreateRequest
        in: body
        name: SubjectCreateRequest
        required: true
        schema:
          $ref: '#/definitions/subject.SubjectCreateRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create subject
      tags:
      - Subject
  /subject/delete:
    delete:
      consumes:
      - application/json
      description: Delete subject
      parameters:
      - description: Course name
        in: query
        name: course_name
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete subject
      tags:
      - Subject
  /subject/delete_prerequisite:
    post:
      consumes:
      - application/json
      description: Delete Prerequisite
      parameters:
      - description: AddPrerequisiteRequest
        in: body
        name: AddPrerequisiteRequest
        required: true
        schema:
          $ref: '#/definitions/subject.AddPrerequisiteRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete Prerequisite
      tags:
      - Subject
  /subject/list:
    get:
      consumes:
      - application/json
      description: List subject
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List subject
      tags:
      - Subject
  /subject/prerequisite:
    get:
      consumes:
      - application/json
      description: List prerequisite
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Course name
        in: query
        name: course_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List prerequisite
      tags:
      - Subject
  /tuition/cal_tuition:
    post:
      consumes:
      - application/json
      description: Calculate tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CalTuitionRequest
        in: body
        name: CalTuitionRequest
        required: true
        schema:
          $ref: '#/definitions/tuition.CalTuitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Calculate tuition
      tags:
      - Tuition
  /tuition/create_tuition:
    post:
      consumes:
      - application/json
      description: Create tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreateTuitionRequest
        in: body
        name: CreateTuitionRequest
        required: true
        schema:
          $ref: '#/definitions/tuition.CreateTuitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create tuition
      tags:
      - Tuition
  /tuition/delete:
    delete:
      consumes:
      - application/json
      description: Delete tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Tuition ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete tuition
      tags:
      - Tuition
  /tuition/get_tuition:
    post:
      consumes:
      - application/json
      description: Calculate tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CalTuitionAdminRequest
        in: body
        name: CalTuitionAdminRequest
        required: true
        schema:
          $ref: '#/definitions/tuition.CalTuitionAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Calculate tuition
      tags:
      - Tuition
  /tuition/list:
    get:
      consumes:
      - application/json
      description: List tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List tuition
      tags:
      - Tuition
  /tuition/pay:
    post:
      consumes:
      - application/json
      description: Pay tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: PayTuitionRequest
        in: body
        name: PayTuitionRequest
        required: true
        schema:
          $ref: '#/definitions/tuition.PayTuitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Pay tuition
      tags:
      - Tuition
  /tuition/update_tuition:
    put:
      consumes:
      - application/json
      description: Update tuition
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: UpdateTuitionRequest
        in: body
        name: UpdateTuitionRequest
        required: true
        schema:
          $ref: '#/definitions/tuition.UpdateTuitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update tuition
      tags:
      - Tuition
  /user/change-pass:
    post:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: ChangePassRequest
        in: body
        name: ChangePassRequest
        required: true
        schema:
          $ref: '#/definitions/users.ChangePassRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Change password
      tags:
      - User
  /user/course/delete:
    delete:
      consumes:
      - application/json
      description: Delete course
      parameters:
      - description: Course ID
        in: path
        name: course_id
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete course
      tags:
      - User
  /user/course/list:
    get:
      consumes:
      - application/json
      description: User list course
      parameters:
      - description: Course year
        in: query
        name: course_year
        required: true
        type: integer
      - description: Course semester
        in: query
        name: course_semester
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User list course
      tags:
      - User
  /user/course/register:
    post:
      consumes:
      - application/json
      description: User register course
      parameters:
      - description: UserRegisterCourseRequest
        in: body
        name: UserRegisterCourseRequest
        required: true
        schema:
          $ref: '#/definitions/coursesmanagament.UserRegisterCourseRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User register course
      tags:
      - User
  /user/course/unregister:
    post:
      consumes:
      - application/json
      description: User unregister course
      parameters:
      - description: UserUnRegisterCourseRequest
        in: body
        name: UserUnRegisterCourseRequest
        required: true
        schema:
          $ref: '#/definitions/coursesmanagament.UserUnRegisterCourseRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User unregister course
      tags:
      - User
  /user/course/unregister_admin:
    post:
      consumes:
      - application/json
      description: User unregister admin course
      parameters:
      - description: UserUnRegisterCourseRequest
        in: body
        name: UserUnRegisterAdminCourseRequest
        required: true
        schema:
          $ref: '#/definitions/coursesmanagament.UserUnRegisterAdminCourseRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User unregister admin course
      tags:
      - User
  /user/credit:
    post:
      consumes:
      - application/json
      description: Get credit
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: GetCreditRequest
        in: body
        name: GetCreditRequest
        required: true
        schema:
          $ref: '#/definitions/coursesmanagament.GetCreditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get credit
      tags:
      - User
  /user/delete:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete user
      tags:
      - User
  /user/info:
    get:
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get user info
      tags:
      - User
  /user/list:
    get:
      description: List users
      parameters:
      - description: Role
        enum:
        - admin
        - user
        - lecturer
        - all
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: List users
      tags:
      - User
  /user/update:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: UpdateUserRequest
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserRequest'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update user
      tags:
      - User
swagger: "2.0"
