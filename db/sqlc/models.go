// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CoStatus string

const (
	CoStatusDone        CoStatus = "done"
	CoStatusFailed      CoStatus = "failed"
	CoStatusProgressing CoStatus = "progressing"
)

func (e *CoStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoStatus(s)
	case string:
		*e = CoStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CoStatus: %T", src)
	}
	return nil
}

type NullCoStatus struct {
	CoStatus CoStatus
	Valid    bool // Valid is true if CoStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCoStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CoStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CoStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCoStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CoStatus), nil
}

type Day string

const (
	DayMonday    Day = "monday"
	DayTuesday   Day = "tuesday"
	DayWednesday Day = "wednesday"
	DayThursday  Day = "thursday"
	DayFriday    Day = "friday"
	DaySaturday  Day = "saturday"
	DaySunday    Day = "sunday"
)

func (e *Day) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Day(s)
	case string:
		*e = Day(s)
	default:
		return fmt.Errorf("unsupported scan type for Day: %T", src)
	}
	return nil
}

type NullDay struct {
	Day   Day
	Valid bool // Valid is true if Day is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDay) Scan(value interface{}) error {
	if value == nil {
		ns.Day, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Day.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDay) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Day), nil
}

type Role string

const (
	RoleAdmin    Role = "admin"
	RoleUser     Role = "user"
	RoleLecturer Role = "lecturer"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type TuStatus string

const (
	TuStatusPaid   TuStatus = "paid"
	TuStatusUnpaid TuStatus = "unpaid"
)

func (e *TuStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TuStatus(s)
	case string:
		*e = TuStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TuStatus: %T", src)
	}
	return nil
}

type NullTuStatus struct {
	TuStatus TuStatus
	Valid    bool // Valid is true if TuStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTuStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TuStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TuStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTuStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TuStatus), nil
}

type Course struct {
	CourseID         uuid.UUID
	CourseTeacherID  uuid.UUID
	DepartmentID     uuid.UUID
	CourseName       string
	CourseFullname   string
	CourseCredit     int32
	CourseYear       int32
	CourseSemester   int32
	CourseStartShift int32
	CourseEndShift   int32
	CourseDay        Day
	MaxEnroller      int32
	CurrentEnroller  int32
	CourseRoom       string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

type Department struct {
	DepartmentID   uuid.UUID
	DepartmentName string
	DepartmentCode string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type PrerequisiteCourse struct {
	CourseID       uuid.UUID
	PrerequisiteID uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type RegistedCourse struct {
	CourseID       uuid.UUID
	UserID         uuid.UUID
	CourseYear     int32
	CourseSemester int32
	Status         CoStatus
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type Session struct {
	SessionID    uuid.UUID
	UserID       uuid.UUID
	RefreshToken string
	ExpiresIn    time.Time
	CreatedAt    time.Time
	UpdatedAt    time.Time
	IsActive     bool
}

type Tuition struct {
	TuitionID       uuid.UUID
	UserID          uuid.UUID
	Tuition         int32
	Paid            int32
	TotalCredit     int32
	Year            int32
	Semester        int32
	TuitionStatus   TuStatus
	TuitionDeadline time.Time
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

type User struct {
	UserID       uuid.UUID
	Username     string
	Password     string
	UserEmail    string
	UserFullname string
	UserRole     Role
	Year         int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}
