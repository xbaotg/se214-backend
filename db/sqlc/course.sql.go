// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :one

INSERT INTO courses (
    course_teacher_id, department_id, course_name, course_fullname, course_credit, course_year, course_semester, course_start_shift, course_end_shift, course_day, max_enroller, current_enroller, course_room, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING course_id, course_teacher_id, department_id, course_name, course_fullname, course_credit, course_year, course_semester, course_start_shift, course_end_shift, course_day, max_enroller, current_enroller, course_room, created_at, updated_at
`

type CreateCourseParams struct {
	CourseTeacherID  uuid.UUID
	DepartmentID     uuid.UUID
	CourseName       string
	CourseFullname   string
	CourseCredit     int32
	CourseYear       int32
	CourseSemester   int32
	CourseStartShift int32
	CourseEndShift   int32
	CourseDay        Day
	MaxEnroller      int32
	CurrentEnroller  int32
	CourseRoom       string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

// create table courses (
//
//	course_id UUID primary key default uuid_generate_v4(),
//	course_teacher_id UUID not null,
//	department_id UUID not null,
//	course_name text not null,
//	course_fullname text not null,
//	course_credit int not null,
//	course_year int not null,
//	course_semester int not null,
//	course_start_shift int not null,
//	course_end_shift int not null,
//	course_day day not null,
//	max_enroller int not null,
//	current_enroller int not null,
//	course_room text not null,
//	created_at timestamp not null default now(),
//	updated_at timestamp not null default now()
//
// );
func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.CourseTeacherID,
		arg.DepartmentID,
		arg.CourseName,
		arg.CourseFullname,
		arg.CourseCredit,
		arg.CourseYear,
		arg.CourseSemester,
		arg.CourseStartShift,
		arg.CourseEndShift,
		arg.CourseDay,
		arg.MaxEnroller,
		arg.CurrentEnroller,
		arg.CourseRoom,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseTeacherID,
		&i.DepartmentID,
		&i.CourseName,
		&i.CourseFullname,
		&i.CourseCredit,
		&i.CourseYear,
		&i.CourseSemester,
		&i.CourseStartShift,
		&i.CourseEndShift,
		&i.CourseDay,
		&i.MaxEnroller,
		&i.CurrentEnroller,
		&i.CourseRoom,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
