// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    session_id, user_id, refresh_token, created_at, updated_at, expires_in, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING session_id, user_id, refresh_token, expires_in, created_at, updated_at, is_active
`

type CreateSessionParams struct {
	SessionID    uuid.UUID
	UserID       uuid.UUID
	RefreshToken string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ExpiresIn    time.Time
	IsActive     bool
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresIn,
		arg.IsActive,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, userID)
	return err
}

const deleteSessionBySessionId = `-- name: DeleteSessionBySessionId :exec
DELETE FROM sessions WHERE session_id = $1
`

func (q *Queries) DeleteSessionBySessionId(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSessionBySessionId, sessionID)
	return err
}

const getSessionBySessionId = `-- name: GetSessionBySessionId :one
SELECT session_id, user_id, refresh_token, expires_in, created_at, updated_at, is_active FROM sessions WHERE session_id = $1
`

func (q *Queries) GetSessionBySessionId(ctx context.Context, sessionID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionBySessionId, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT session_id, user_id, refresh_token, expires_in, created_at, updated_at, is_active FROM sessions WHERE user_id = $1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByUserId, userID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const revolveSession = `-- name: RevolveSession :exec
UPDATE sessions SET
    updated_at = $2,
    is_active = $3
WHERE session_id = $1
`

type RevolveSessionParams struct {
	SessionID uuid.UUID
	UpdatedAt time.Time
	IsActive  bool
}

func (q *Queries) RevolveSession(ctx context.Context, arg RevolveSessionParams) error {
	_, err := q.db.ExecContext(ctx, revolveSession, arg.SessionID, arg.UpdatedAt, arg.IsActive)
	return err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions SET
    refresh_token = $2,
    updated_at = $3
WHERE user_id = $1
`

type UpdateSessionParams struct {
	UserID       uuid.UUID
	RefreshToken string
	UpdatedAt    time.Time
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.UserID, arg.RefreshToken, arg.UpdatedAt)
	return err
}
