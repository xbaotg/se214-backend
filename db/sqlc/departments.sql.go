// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: departments.sql

package sqlc

import (
	"context"
	"time"
)

const createDepartment = `-- name: CreateDepartment :one


INSERT INTO departments (
    department_name, department_code, created_at, updated_at
) VALUES (
    $1, $2, $3, $4
) RETURNING department_id, department_name, department_code, created_at, updated_at
`

type CreateDepartmentParams struct {
	DepartmentName string
	DepartmentCode string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

// create table departments (
//
//	department_id UUID primary key default uuid_generate_v4(),
//	department_name text not null,
//	department_code text not null,
//	created_at timestamp not null default now(),
//	updated_at timestamp not null default now()
//
// );
func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, createDepartment,
		arg.DepartmentName,
		arg.DepartmentCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Department
	err := row.Scan(
		&i.DepartmentID,
		&i.DepartmentName,
		&i.DepartmentCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
SELECT department_id, department_name, department_code, created_at, updated_at FROM departments
`

func (q *Queries) ListDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.DepartmentID,
			&i.DepartmentName,
			&i.DepartmentCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
